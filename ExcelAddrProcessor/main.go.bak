package main

import (
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"

	"github.com/xuri/excelize/v2"
)

// 删掉客户端支付状态、师傅手机和下单时间
// P 列跟单备注：删掉后台导入及空格
// O 列预约时间：只留日期，删掉具体时间
// Q 列回访内容：有验券内容及 25 或 30 数字，则在 I 列维修费增加美团券列，金额为 50
// 在美团券列增加合计，计算规则为美团劵 + 维修费 + 材料费
// K 列支付状态，无需支付状态，则维修费、材料费及支付状态删除内容留空
// K 列支付状态，未支付状态，标红维修费、材料费及支付状态
// Q 列回访内容：有关键字提、交公司等，增加新列线下交提成，值为提关键字后的数字（收380材料30提140已交公司）
// 合计金额 >= 70，订单状态修改为成功订单。0 < 合计金额 < 70，订单状态修改为只收上门费，收费金额 == 0，订单状态修改为待服务
// 派单师傅列：如果内容是测试1，则修改为城市-未派出。如果内容是邓姐，则修改为城市-邓姐外派

func main() {
	fmt.Print("请输入文件名（包含文件后缀，如：data.xlsx）: ")
	var response string
	fmt.Scanln(&response)

	// response = "data.xlsx"

	// 打开 Excel 文件
	f, err := excelize.OpenFile(response)
	if err != nil {
		log.Fatalf("无法打开文件: %v", err)
	}
	defer f.Close()

	// 获取所有工作表名
	sheetList := f.GetSheetList()
	if len(sheetList) == 0 {
		log.Fatalf("文件中没有工作表")
	}
	sheetName := sheetList[0] // 使用第一个工作表

	// 获取所有行
	rows, err := f.GetRows(sheetName)
	if err != nil {
		log.Fatalf("无法获取行: %v", err)
	}

	// 在原有列后添加新列
	if err := f.InsertCols(sheetName, "E", 4); err != nil {
		log.Fatalf("无法插入新列: %v", err)
	}

	// 添加美团券列和合计列
	if err := f.InsertCols(sheetName, "L", 3); err != nil {
		log.Fatalf("无法插入合计、美团券和线下交提成列: %v", err)
	}

	for i, row := range rows {
		if i == 0 {
			// 设置新列的标题
			f.SetCellValue(sheetName, "E1", "省")
			f.SetCellValue(sheetName, "F1", "市")
			f.SetCellValue(sheetName, "G1", "县/区")
			f.SetCellValue(sheetName, "H1", "详细地址")
			f.SetCellValue(sheetName, "L1", "合计")
			f.SetCellValue(sheetName, "M1", "美团券")
			f.SetCellValue(sheetName, "N1", "线下交提成")
			continue
		}

		if len(row) > 3 { // 确保D列存在
			// 处理地址
			address := row[3]
			province, city, district, detail := parseAddress(address)
			f.SetCellValue(sheetName, fmt.Sprintf("E%d", i+1), province)
			f.SetCellValue(sheetName, fmt.Sprintf("F%d", i+1), city)
			f.SetCellValue(sheetName, fmt.Sprintf("G%d", i+1), district)
			f.SetCellValue(sheetName, fmt.Sprintf("H%d", i+1), detail)

			// 处理O列预约时间
			if len(row) > 14 {
				appointmentTime := row[14]
				f.SetCellValue(sheetName, fmt.Sprintf("V%d", i+1), extractDate(appointmentTime))
			}

			// 处理P列跟单备注
			if len(row) > 15 {
				note := row[15]
				f.SetCellValue(sheetName, fmt.Sprintf("W%d", i+1), strings.TrimSpace(strings.Replace(note, "后台导入", "", -1)))
			}

			// 处理Q列回访内容
			if len(row) > 16 {
				feedback := row[16]
				if strings.Contains(feedback, "验券") && (strings.Contains(feedback, "25") || strings.Contains(feedback, "30")) {
					f.SetCellValue(sheetName, fmt.Sprintf("M%d", i+1), 50)
				}

				// 处理线下交提成
				offlineCommission := extractOfflineCommission(feedback)
				if offlineCommission > 0 {
					f.SetCellValue(sheetName, fmt.Sprintf("N%d", i+1), offlineCommission)
				}
			}

			// 处理K列支付状态
			if len(row) > 10 {
				paymentStatus := row[10]
				if paymentStatus == "无需支付" {
					f.SetCellValue(sheetName, fmt.Sprintf("P%d", i+1), "") // 清空维修费
					f.SetCellValue(sheetName, fmt.Sprintf("Q%d", i+1), "") // 清空材料费
					f.SetCellValue(sheetName, fmt.Sprintf("R%d", i+1), "") // 清空支付状态
				} else if paymentStatus == "未支付" {
					style, _ := f.NewStyle(&excelize.Style{
						Font: &excelize.Font{Color: "FF0000"},
					})
					f.SetCellStyle(sheetName, fmt.Sprintf("P%d", i+1), fmt.Sprintf("R%d", i+1), style)
				}
			}

			// 计算合计
			repairFee, _ := f.GetCellValue(sheetName, fmt.Sprintf("P%d", i+1))
			materialFee, _ := f.GetCellValue(sheetName, fmt.Sprintf("Q%d", i+1))
			meituanCoupon, _ := f.GetCellValue(sheetName, fmt.Sprintf("M%d", i+1))
			total := sumFees(repairFee, materialFee, meituanCoupon)
			f.SetCellValue(sheetName, fmt.Sprintf("L%d", i+1), total)

			// 修改订单状态
			if total >= 70 {
				f.SetCellValue(sheetName, fmt.Sprintf("K%d", i+1), "成功订单")
			} else if total > 0 && total < 70 {
				f.SetCellValue(sheetName, fmt.Sprintf("K%d", i+1), "只收上门费")
			} else {
				f.SetCellValue(sheetName, fmt.Sprintf("K%d", i+1), "待服务")
			}

			// 修改派单师傅
			if len(row) > 11 {
				masterDispatcher := row[11]
				if masterDispatcher == "测试1" {
					f.SetCellValue(sheetName, fmt.Sprintf("S%d", i+1), city+"-未派出")
				} else if masterDispatcher == "邓姐" {
					f.SetCellValue(sheetName, fmt.Sprintf("S%d", i+1), city+"-邓姐外派")
				}
			}
		}
	}

	// 删除R列和S列
	if err := f.RemoveCol(sheetName, "O"); err != nil {
		log.Printf("无法删除O列: %v", err)
	}
	if err := f.RemoveCol(sheetName, "S"); err != nil {
		log.Printf("无法删除N列: %v", err)
	}
	if err := f.RemoveCol(sheetName, "S"); err != nil {
		log.Printf("无法删除M列: %v", err)
	}

	// 保存修改后的文件
	if err := f.SaveAs("output.xlsx"); err != nil {
		log.Fatalf("无法保存文件: %v", err)
	}

	fmt.Println("处理完成，结果已保存到 output.xlsx")
}

func parseAddress(address string) (province, city, district, detail string) {
	parts := strings.SplitN(address, "市", 2)
	if len(parts) == 2 {
		// 处理 "省" 或 "自治区"
		cityParts := strings.SplitN(parts[0], "省", 2)
		if len(cityParts) != 2 {
			cityParts = strings.SplitN(parts[0], "自治区", 2)
			if len(cityParts) == 2 {
				province = cityParts[0] + "自治区"
				city = cityParts[1] + "市"
			} else {
				city = parts[0] + "市"
			}
		} else {
			province = cityParts[0] + "省"
			city = cityParts[1] + "市"
		}

		// 处理 "区" 或 "县"
		districtParts := strings.SplitN(parts[1], "区", 2)
		if len(districtParts) == 2 {
			district = districtParts[0] + "区"
			detail = districtParts[1]
		} else {
			districtParts = strings.SplitN(parts[1], "县", 2)
			if len(districtParts) == 2 {
				district = districtParts[0] + "县"
				detail = districtParts[1]
			} else {
				detail = parts[1]
			}
		}
	} else {
		detail = address
	}
	return
}

func extractDate(dateTime string) string {
	parts := strings.Split(dateTime, " ")
	if len(parts) > 0 {
		return parts[0]
	}
	return dateTime
}

func extractOfflineCommission(feedback string) float64 {
	re := regexp.MustCompile(`提(\d+)`)
	match := re.FindStringSubmatch(feedback)
	if len(match) > 1 {
		commission, err := strconv.ParseFloat(match[1], 64)
		if err == nil {
			return commission
		}
	}
	return 0
}

func sumFees(fees ...string) float64 {
	var total float64
	for _, fee := range fees {
		value, err := strconv.ParseFloat(fee, 64)
		if err == nil {
			total += value
		}
	}
	return total
}
